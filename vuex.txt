// Vuex

// getters = to show the value statically
// mutations = the only way to change the data stored in Vuex but they will always be synchronous
// actions = will update data asynchronously by using the mutations

// example
export const store = new Vuex.Store({
    state: {
        counter: 0
    },
    getters: {
        tripleCounter: state => {
            return state.counter * 3;
        },
        counter: state => state.counter,
    },
    mutations: {
        increment: (state, num) => {
            state.counter += num; // num is arg
        }
    },
    actions: {
        asyncIncrment: ({commit}, payload) => {
            commit('increment', payload.data)
        }
    }
})

// how to call from components
// use this.$store.commit('mutation_name', arg) for mutations
// use this.$store.dispatch('action_name', payload) for actions
// use this.$store.getters.getterName for getters
// use this.$store.state.stateName for state (only work on computed return property)

// use spread operator if you have a lot of getters/mutations/actions
// import { mapGetters, mapMutations, mapActions } from 'vuex';
// methods: {
//     ...mapActions([
//         'action_name'
//     ]),
//     ...mapGetters([
//         'getter_name'
//     ])
// },
// computed: {
//     ...mapActions([
//         'action_name'
//     ])
// }